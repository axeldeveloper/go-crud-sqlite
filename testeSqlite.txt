package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"

	_ "github.com/mattn/go-sqlite3"
)

var (
	db            *sql.DB
	err           error
	authenticated = false
)

func handlerTest(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])
}

func main() {
	db, err = sql.Open("sqlite3", "./nraboy.db")

	statement, _ := db.Prepare("CREATE TABLE IF NOT EXISTS people (id INTEGER PRIMARY KEY, firstname TEXT, lastname TEXT)")
	statement.Exec()
	statement, _ = db.Prepare("INSERT INTO people (firstname, lastname) VALUES (?, ?)")
	statement.Exec("Nic", "Raboy")
	rows, _ := db.Query("SELECT id, firstname, lastname FROM people")

	println(rows)

	if err != nil {
		panic(err)
	}
	defer db.Close()
	// test connection
	err = db.Ping()
	if err != nil {
		panic(err)
	}

	//os.Setenv("PORT", "4300")

	//port := os.Getenv("PORT")
	//if port == "" {
	//	log.Fatal("$PORT must be set")
	//}
	// route
	//http.HandleFunc("/", indexHandler)
	//http.HandleFunc("/login", loginHandler)
	//http.HandleFunc("/logout", logoutHandler)
	///http.HandleFunc("/register", registerHandler)
	//http.HandleFunc("/list", listHandler)
	///http.HandleFunc("/create", createHandler)
	//http.HandleFunc("/update", updateHandler)
	//http.HandleFunc("/delete", deleteHandler)
	//http.Handle("/statics/",
	//	http.StripPrefix("/statics/", http.FileServer(http.Dir("./statics"))),
	//)
	//http.ListenAndServe(":"+port, nil)
	//http.ListenAndServe(":4300", nil)

	http.HandleFunc("/", handlerTest)
	log.Fatal(http.ListenAndServe(":4300", nil))
	fmt.Println("Run Server Port:4300")

}
